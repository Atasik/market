// Code generated by MockGen. DO NOT EDIT.
// Source: cart.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "market/pkg/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCart is a mock of Cart interface.
type MockCart struct {
	ctrl     *gomock.Controller
	recorder *MockCartMockRecorder
}

// MockCartMockRecorder is the mock recorder for MockCart.
type MockCartMockRecorder struct {
	mock *MockCart
}

// NewMockCart creates a new mock instance.
func NewMockCart(ctrl *gomock.Controller) *MockCart {
	mock := &MockCart{ctrl: ctrl}
	mock.recorder = &MockCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCart) EXPECT() *MockCartMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockCart) AddProduct(userID, cartID, productID, amountToPurchase int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", userID, cartID, productID, amountToPurchase)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockCartMockRecorder) AddProduct(userID, cartID, productID, amountToPurchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockCart)(nil).AddProduct), userID, cartID, productID, amountToPurchase)
}

// Create mocks base method.
func (m *MockCart) Create(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartMockRecorder) Create(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCart)(nil).Create), userID)
}

// DeleteAllProducts mocks base method.
func (m *MockCart) DeleteAllProducts(userID, cartID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllProducts", userID, cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllProducts indicates an expected call of DeleteAllProducts.
func (mr *MockCartMockRecorder) DeleteAllProducts(userID, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllProducts", reflect.TypeOf((*MockCart)(nil).DeleteAllProducts), userID, cartID)
}

// DeleteProduct mocks base method.
func (m *MockCart) DeleteProduct(userID, cartID, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", userID, cartID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCartMockRecorder) DeleteProduct(userID, cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCart)(nil).DeleteProduct), userID, cartID, productID)
}

// GetAllProducts mocks base method.
func (m *MockCart) GetAllProducts(userID, CartID int, q model.ProductQueryInput) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", userID, CartID, q)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockCartMockRecorder) GetAllProducts(userID, CartID, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockCart)(nil).GetAllProducts), userID, CartID, q)
}

// GetByUserID mocks base method.
func (m *MockCart) GetByUserID(userID int) (model.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].(model.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockCartMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockCart)(nil).GetByUserID), userID)
}

// UpdateProductAmount mocks base method.
func (m *MockCart) UpdateProductAmount(userID, CartID, productID, amountToPurchase int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductAmount", userID, CartID, productID, amountToPurchase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductAmount indicates an expected call of UpdateProductAmount.
func (mr *MockCartMockRecorder) UpdateProductAmount(userID, CartID, productID, amountToPurchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductAmount", reflect.TypeOf((*MockCart)(nil).UpdateProductAmount), userID, CartID, productID, amountToPurchase)
}
