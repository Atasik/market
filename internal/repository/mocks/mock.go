// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/mocks/mock.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "market/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductRepo) Create(product model.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductRepoMockRecorder) Create(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductRepo)(nil).Create), product)
}

// Delete mocks base method.
func (m *MockProductRepo) Delete(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductRepoMockRecorder) Delete(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductRepo)(nil).Delete), productID)
}

// GetAll mocks base method.
func (m *MockProductRepo) GetAll(q model.ProductQueryInput) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", q)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductRepoMockRecorder) GetAll(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductRepo)(nil).GetAll), q)
}

// GetByID mocks base method.
func (m *MockProductRepo) GetByID(productID int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductRepoMockRecorder) GetByID(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProductRepo)(nil).GetByID), productID)
}

// GetProductsByCategory mocks base method.
func (m *MockProductRepo) GetProductsByCategory(productCategory string, q model.ProductQueryInput) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategory", productCategory, q)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategory indicates an expected call of GetProductsByCategory.
func (mr *MockProductRepoMockRecorder) GetProductsByCategory(productCategory, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategory", reflect.TypeOf((*MockProductRepo)(nil).GetProductsByCategory), productCategory, q)
}

// GetProductsByUserID mocks base method.
func (m *MockProductRepo) GetProductsByUserID(userID int, q model.ProductQueryInput) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByUserID", userID, q)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByUserID indicates an expected call of GetProductsByUserID.
func (mr *MockProductRepoMockRecorder) GetProductsByUserID(userID, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByUserID", reflect.TypeOf((*MockProductRepo)(nil).GetProductsByUserID), userID, q)
}

// Update mocks base method.
func (m *MockProductRepo) Update(productID int, input model.UpdateProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", productID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductRepoMockRecorder) Update(productID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductRepo)(nil).Update), productID, input)
}

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderRepo) Create(cartID, userID int, order model.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", cartID, userID, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepoMockRecorder) Create(cartID, userID, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepo)(nil).Create), cartID, userID, order)
}

// GetAll mocks base method.
func (m *MockOrderRepo) GetAll(userID int, q model.OrderQueryInput) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID, q)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrderRepoMockRecorder) GetAll(userID, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrderRepo)(nil).GetAll), userID, q)
}

// GetByID mocks base method.
func (m *MockOrderRepo) GetByID(orderID int) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", orderID)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderRepoMockRecorder) GetByID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderRepo)(nil).GetByID), orderID)
}

// GetProductsByOrderID mocks base method.
func (m *MockOrderRepo) GetProductsByOrderID(orderID int, q model.ProductQueryInput) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByOrderID", orderID, q)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByOrderID indicates an expected call of GetProductsByOrderID.
func (mr *MockOrderRepoMockRecorder) GetProductsByOrderID(orderID, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByOrderID", reflect.TypeOf((*MockOrderRepo)(nil).GetProductsByOrderID), orderID, q)
}

// MockReviewRepo is a mock of ReviewRepo interface.
type MockReviewRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReviewRepoMockRecorder
}

// MockReviewRepoMockRecorder is the mock recorder for MockReviewRepo.
type MockReviewRepoMockRecorder struct {
	mock *MockReviewRepo
}

// NewMockReviewRepo creates a new mock instance.
func NewMockReviewRepo(ctrl *gomock.Controller) *MockReviewRepo {
	mock := &MockReviewRepo{ctrl: ctrl}
	mock.recorder = &MockReviewRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewRepo) EXPECT() *MockReviewRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewRepo) Create(review model.Review) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", review)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReviewRepoMockRecorder) Create(review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewRepo)(nil).Create), review)
}

// Delete mocks base method.
func (m *MockReviewRepo) Delete(reviewID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", reviewID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewRepoMockRecorder) Delete(reviewID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewRepo)(nil).Delete), reviewID)
}

// GetAll mocks base method.
func (m *MockReviewRepo) GetAll(productID int, q model.ReviewQueryInput) ([]model.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", productID, q)
	ret0, _ := ret[0].([]model.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockReviewRepoMockRecorder) GetAll(productID, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReviewRepo)(nil).GetAll), productID, q)
}

// GetReviewIDByProductIDUserID mocks base method.
func (m *MockReviewRepo) GetReviewIDByProductIDUserID(productID, userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewIDByProductIDUserID", productID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewIDByProductIDUserID indicates an expected call of GetReviewIDByProductIDUserID.
func (mr *MockReviewRepoMockRecorder) GetReviewIDByProductIDUserID(productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewIDByProductIDUserID", reflect.TypeOf((*MockReviewRepo)(nil).GetReviewIDByProductIDUserID), productID, userID)
}

// Update mocks base method.
func (m *MockReviewRepo) Update(userID, productID int, input model.UpdateReviewInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, productID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReviewRepoMockRecorder) Update(userID, productID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewRepo)(nil).Update), userID, productID, input)
}

// MockCartRepo is a mock of CartRepo interface.
type MockCartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepoMockRecorder
}

// MockCartRepoMockRecorder is the mock recorder for MockCartRepo.
type MockCartRepoMockRecorder struct {
	mock *MockCartRepo
}

// NewMockCartRepo creates a new mock instance.
func NewMockCartRepo(ctrl *gomock.Controller) *MockCartRepo {
	mock := &MockCartRepo{ctrl: ctrl}
	mock.recorder = &MockCartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepo) EXPECT() *MockCartRepoMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockCartRepo) AddProduct(cartID, productID, amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", cartID, productID, amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockCartRepoMockRecorder) AddProduct(cartID, productID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockCartRepo)(nil).AddProduct), cartID, productID, amount)
}

// Create mocks base method.
func (m *MockCartRepo) Create(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartRepoMockRecorder) Create(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCartRepo)(nil).Create), userID)
}

// DeleteAllProducts mocks base method.
func (m *MockCartRepo) DeleteAllProducts(cartID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllProducts", cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllProducts indicates an expected call of DeleteAllProducts.
func (mr *MockCartRepoMockRecorder) DeleteAllProducts(cartID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllProducts", reflect.TypeOf((*MockCartRepo)(nil).DeleteAllProducts), cartID)
}

// DeleteProduct mocks base method.
func (m *MockCartRepo) DeleteProduct(cartID, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", cartID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCartRepoMockRecorder) DeleteProduct(cartID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCartRepo)(nil).DeleteProduct), cartID, productID)
}

// GetAllProducts mocks base method.
func (m *MockCartRepo) GetAllProducts(cartID int, q model.ProductQueryInput) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", cartID, q)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockCartRepoMockRecorder) GetAllProducts(cartID, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockCartRepo)(nil).GetAllProducts), cartID, q)
}

// GetByUserID mocks base method.
func (m *MockCartRepo) GetByUserID(userID int) (model.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].(model.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockCartRepoMockRecorder) GetByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockCartRepo)(nil).GetByUserID), userID)
}

// GetProductByID mocks base method.
func (m *MockCartRepo) GetProductByID(cartID, productID int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", cartID, productID)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockCartRepoMockRecorder) GetProductByID(cartID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockCartRepo)(nil).GetProductByID), cartID, productID)
}

// UpdateProductAmount mocks base method.
func (m *MockCartRepo) UpdateProductAmount(cartID, productID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductAmount", cartID, productID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductAmount indicates an expected call of UpdateProductAmount.
func (mr *MockCartRepoMockRecorder) UpdateProductAmount(cartID, productID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductAmount", reflect.TypeOf((*MockCartRepo)(nil).UpdateProductAmount), cartID, productID, amount)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(arg0 model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), arg0)
}

// GetUser mocks base method.
func (m *MockUserRepo) GetUser(login string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepoMockRecorder) GetUser(login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepo)(nil).GetUser), login)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(userID int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), userID)
}
